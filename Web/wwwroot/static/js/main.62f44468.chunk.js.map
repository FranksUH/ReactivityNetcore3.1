{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/errorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/dateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/AcitivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFoundError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoCropperWidget.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileCards.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","console","log","message","content","toast","status","data","history","push","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","limit","offset","filters","Map","settings","URLSearchParams","forEach","value","key","toISOString","toString","params","details","id","create","activity","update","attend","unattend","current","login","user","register","username","uploadPhoto","photo","setMain","deletePhoto","follow","unFollow","listFollowings","listFollowers","listActivities","predicate","setActivityFields","date","split","isGoing","attendees","some","att","userName","isHost","getAttendeeForUser","displayName","image","ActivityStore","observable","ref","rootStore","this","reaction","filterPredicate","keys","page","activitiesRegistry","clear","loadActivities","activities","sortedActivities","sort","a","b","Date","parse","Object","entries","reduce","groupActivitiesByDate","Array","from","values","action","set","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","state","catch","on","comment","runInAction","selectedActivity","comments","stop","ActivityId","invoke","loadingInitial","agent","userStore","numberOfPages","Math","ceil","activityCount","submiting","attendee","event","target","currentTarget","name","loading","filter","index","computed","UserStore","userForm","loggedUser","setToken","modalStore","closeModal","createdUser","CommonStore","setItem","removeItem","appLoadded","ModalStore","shallow","root","open","modal","ProfileStore","profile","loadingActivities","userActivities","uploading","photos","isMain","loadingSetting","find","ph","following","followersCount","result","followings","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","Logout","userImage","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","borderColor","borderWidth","ActivityListItemAttendee","List","horizontal","map","Popup","trigger","size","circular","bordered","ActivityListItem","host","x","imageAddress","Segment","Group","margin","Content","Header","title","Meta","Description","Label","color","basic","Icon","venue","city","secondary","clearing","description","floated","activitiesByDate","group","format","divided","LoadingComponent","Dimmer","active","Loader","setPredicat","vertical","width","marginTop","attached","has","onChange","setPage","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","disabled","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","length","flat","err","i","LoginForm","Login","validate","combineValidators","email","isRequired","password","onSubmit","FORM_ERROR","render","handleSubmit","submitting","dirtySinceLastSubmit","invalid","pristine","submitError","textAlign","component","fluid","RegisterForm","Register","HomePage","LoggedIn","openModal","className","marginBottom","TextAreaInput","rows","SelectInput","options","Select","e","category","DateInput","composeValidators","hasLengthGreaterThan","match","createActivity","editActivities","loadActivity","setActivity","act","newActivity","uuid","initialValues","activityImageStyle","activityImageTextStyle","bottom","left","height","joinActivity","cancelAttendee","padding","ActivityDetailedInfo","verticalAlign","formatDistance","concat","compareAsc","createHubConnection","addComment","stopHubConnection","border","Comment","Avatar","Author","Metadata","createdAt","Text","Actions","Action","form","reset","labelPosition","primary","relaxed","ribbon","Extra","AcitivityDetailedHeader","NotFoundError","Inline","Modal","onClose","isCurrentUser","unfollow","Statistic","widths","label","followingCount","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","assign","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoCropperWidget","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","minHeight","overflow","IsCurrentUser","UploadPhoto","deleteUser","addPhotoMode","setAddPhotoMode","Tab","Pane","Card","itemsPerRow","negative","extra","consult","loadFollows","fw","panes","menuItem","pane","loadUserActivities","menu","onTabChange","activeIndex","handleTabChange","objectFit","ProfileActivities","menuPosition","LoadProfile","withRouter","location","setLoaded","GetUser","finally","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62f44468.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { IActivity, IActivityEnvelop} from '../models/activity';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues, IUserActivity } from '../models/user';\nimport { IProfile, IPhoto } from '../models/profiles';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL; //'https://localhost:5001/api'\n\naxios.interceptors.request.use((config)=>\n{\n    const token = window.localStorage.getItem('jwt');\n    if(token) config.headers.Authorization = `bearer ${token}`;\n    return config;\n}, error=> Promise.reject(error));\n\naxios.interceptors.response.use(undefined, error=> {\n    console.log(error);\n    if(error.message === 'Network Error' && !error.content)\n    {\n        toast.error('Network Failed');\n    }\n    const {status, data, config} = error.response;\n    if(status === 404)\n    {        \n        history.push('/notFound');\n        //throw error.response;\n    }    \n    if(status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id'))\n    {\n        history.push('/notFound');\n    }\n    if(status === 500)\n    {\n        toast.error('Internal Server Error');        \n    }\n    //error.response.statusText='Error Server side'\n    throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\n    del: (url: string) => axios.delete(url).then(responseBody), \n    postFrom: (url: string, file:Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post(url, formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        }).then(responseBody);\n    }\n};\n\nconst Activities = {\n    list: (limit: number=4, offset:number=0, filters: Map<string,string|Date>=new Map()): Promise<IActivityEnvelop> => \n    {\n        const settings = new URLSearchParams();\n        filters.forEach((value, key) => {\n            console.log('key: ',key, 'value: ',value);\n\n            if(key=== 'startDate')\n            {\n                settings.append(key,  (value as Date).toISOString());\n            }\n            else\n            {\n                settings.append(key,value.toString());\n            }\n        });\n        return axios.get(`/activities/${limit}/${offset}`, {params: settings}).then(responseBody);\n    },\n    details: (id: string): Promise<IActivity> => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`,{}),\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n}\n\nconst Users = {\n    current: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post('/user/login', user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post('/user/register', user), \n\n}\n\nconst Profiles = {\n    get: (username: string): Promise<IProfile> => requests.get(`/profile/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postFrom('/photo', photo),\n    setMain: (id: string) => requests.post(`/photo/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photo/${id}`),\n    follow: (username: string) => requests.post(`/profile/${username}/follow`,{}),\n    unFollow: (username: string) => requests.del(`/profile/${username}/follow`),\n    listFollowings: (username: string): Promise<IProfile[]> => requests.get(`profile/${username}/following`),\n    listFollowers: (username: string): Promise<IProfile[]> => requests.get(`profile/${username}/followers`),\n    listActivities: (username: string, predicate: string): Promise<IUserActivity[]> => requests.get(`profile/${username}/activities/?predicate=${predicate}`)\n}\n\n\nexport default {\n    Activities,\n    Users,\n    Profiles\n}","import { IActivity, IAttendee } from \"../../models/activity\"\r\nimport { IUser } from \"../../models/user\"\r\n\r\nexport const setActivityFields= (activity: IActivity, user: IUser)=>\r\n{\r\n    activity.date = activity.date.split('.')[0]\r\n    activity.isGoing = activity.attendees.some(att=>\r\n        att.userName===user.userName);\r\n    activity.isHost = activity.attendees.some(att=>\r\n        att.userName===user.userName && att.isHost);\r\n\r\n    return activity;\r\n}\r\n\r\nexport const getAttendeeForUser = (user: IUser):IAttendee =>\r\n{\r\n    return {\r\n        displayName: user.displayName,\r\n        image: user.image!,\r\n        isHost: false,\r\n        userName: user.userName\r\n    };        \r\n}","import {observable, action, computed, runInAction, reaction} from 'mobx';\r\nimport {SyntheticEvent} from 'react';\r\nimport { IActivity, IAttendee } from '../models/activity';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport {RootStore} from '../stores/rootStore';\r\nimport {setActivityFields} from '../common/util/util';\r\nimport {getAttendeeForUser} from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@aspnet/signalr';\r\n \r\nconst LIMIT = 2;\r\n\r\nexport default class ActivityStore{\r\n    @observable activitiesRegistry = new Map();\r\n    @observable selectedActivity: IActivity| null = null;\r\n    @observable loadingInitial = false;\r\n    @observable submiting = false;\r\n    @observable target = '';\r\n    @observable loading = false;\r\n    @observable.ref hubConnection: HubConnection|null = null;\r\n    @observable page = 0;\r\n    @observable filterPredicate = new Map();\r\n    @observable numberOfPages = 0;\r\n\r\n\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore){\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(()=> this.filterPredicate.keys(),\r\n                 ()=> \r\n                 {\r\n                    this.page = 0;\r\n                    this.activitiesRegistry.clear();\r\n                    this.loadActivities();\r\n                 });\r\n    }\r\n\r\n    @action setPredicat = (predicate: string, value: string|Date) => {\r\n        this.filterPredicate.clear();\r\n        if(predicate !== 'all')\r\n            this.filterPredicate.set(predicate, value);\r\n    }\r\n\r\n    //----------------------SignalR---------------------------\r\n\r\n    @action createHubConnection = () => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n        .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n            accessTokenFactory: () => this.rootStore.commonStore.token!\r\n        })\r\n        .configureLogging(LogLevel.Information)\r\n        .build();\r\n\r\n        this.hubConnection\r\n        .start()\r\n        .then(()=> console.log(this.hubConnection!.state))\r\n        .catch(error=> console.log(\"Error stableshing connection: \", error));      \r\n        \r\n        this.hubConnection.on('ReceiveComment', comment=> {\r\n            runInAction(()=>{\r\n                console.log('received ', comment);\r\n                this.selectedActivity?.comments.push(comment);\r\n                });            \r\n        })\r\n    }\r\n\r\n    @action stopHubConnection = () => {\r\n        this.hubConnection!.stop();\r\n    }\r\n\r\n    @action addComment = async (values: any) => {\r\n        values.ActivityId = this.selectedActivity?.id;\r\n        try \r\n        {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    //--------------------------------------------------------\r\n\r\n    @action loadActivities = async () => \r\n    {\r\n        this.loadingInitial = true;\r\n        try\r\n        {\r\n            const response = await agent.Activities.list(LIMIT, this.page*LIMIT, this.filterPredicate);\r\n            runInAction(()=> {\r\n                response.activities.forEach((activity) => {\r\n                    setActivityFields(activity, this.rootStore.userStore.user!);\r\n                    this.activitiesRegistry.set(activity.id, activity);\r\n                    })    \r\n                this.numberOfPages = Math.ceil(response.activityCount/LIMIT);\r\n                this.loadingInitial = false;\r\n            })            \r\n        }\r\n        catch(error)\r\n        {\r\n            runInAction(()=>{\r\n                console.log(error);\r\n                this.loadingInitial = false;\r\n            })           \r\n        }\r\n    }    \r\n\r\n    @action createActivity = async (activity: IActivity) => {\r\n        this.submiting = true;\r\n        try \r\n        {\r\n            await agent.Activities.create(activity);\r\n            const attendee: IAttendee = {\r\n                ...getAttendeeForUser(this.rootStore.userStore.user!),\r\n                isHost: true\r\n            };\r\n            activity.attendees = [attendee]; \r\n            activity.isHost = true;\r\n            runInAction(()=>{                               \r\n                this.activitiesRegistry.set(activity.id, activity);                \r\n                this.submiting = false;\r\n            });            \r\n            history.push(`/activities/${activity.id}`);\r\n        } \r\n        catch (error) \r\n        {\r\n            runInAction(()=>{\r\n                console.log(error);\r\n                this.submiting = false;\r\n            });           \r\n            toast.error('Problem submitting data'); \r\n        }\r\n    }\r\n\r\n    @action editActivities = async (activity: IActivity) =>\r\n    {\r\n        this.submiting = true;\r\n        try \r\n        {\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n                this.activitiesRegistry.set(activity.id, activity);\r\n                this.selectedActivity = activity;\r\n                this.submiting = false;\r\n            });            \r\n            history.push(`/activities/${activity.id}`);\r\n        } \r\n        catch (error) \r\n        {\r\n            runInAction(()=>{\r\n                this.submiting = false;\r\n                console.log(error);\r\n                toast.error('Problem submitting data');\r\n            })           \r\n        }        \r\n    }\r\n\r\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) =>\r\n    {\r\n        this.submiting = true;\r\n        this.target = event.currentTarget.name;\r\n        try \r\n        {\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activitiesRegistry.delete(id);\r\n                this.submiting = false;\r\n                this.target = '';\r\n            });            \r\n        } \r\n        catch (error) \r\n        {\r\n            runInAction(()=>{\r\n                console.log(error);\r\n                this.submiting = false;\r\n                this.target = '';\r\n            });            \r\n        }\r\n    }\r\n\r\n    @action loadActivity = async (id: string) => {\r\n        let activity = this.activitiesRegistry.get(id);\r\n        if(activity)\r\n        {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else\r\n        {\r\n            this.loadingInitial = true;\r\n            try \r\n            {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(()=>{\r\n                    setActivityFields(activity, this.rootStore.userStore.user!);\r\n                    this.loadingInitial = false;\r\n                    this.selectedActivity = activity;\r\n                    this.activitiesRegistry.set(id,activity);\r\n                })                \r\n                return activity;\r\n            } \r\n            catch (error) \r\n            {\r\n                runInAction(()=>{this.loadingInitial = false;})                \r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    @action clearActivity = () => {\r\n        this.selectedActivity = null;\r\n    } \r\n\r\n    @action joinActivity = async () => {\r\n        const attendee = getAttendeeForUser(this.rootStore.userStore.user!);\r\n\r\n        try \r\n        {\r\n            this.loading = true;\r\n            await agent.Activities.attend(this.selectedActivity?.id!);\r\n            runInAction(()=>{\r\n                this.loading = false;                \r\n                if(this.selectedActivity)\r\n                {\r\n                    this.selectedActivity.attendees.push(attendee);\r\n                    this.selectedActivity.isGoing = true;\r\n                    this.activitiesRegistry.set(this.selectedActivity.id, this.selectedActivity);\r\n                }\r\n            })\r\n        } \r\n        catch (error) \r\n        {\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            });            \r\n            toast.error(\"Error attending activity\");\r\n        }\r\n    }\r\n\r\n    @action cancelAttendee = async () => {\r\n        try\r\n        {\r\n            this.loading = true;\r\n            await agent.Activities.unattend(this.selectedActivity?.id!);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n                if(this.selectedActivity)\r\n                {\r\n                    this.selectedActivity.attendees = this.selectedActivity?.attendees\r\n                        .filter(att=>att.userName !== this.rootStore.userStore.user?.userName); \r\n\r\n                    this.selectedActivity.isGoing = false;\r\n                    this.activitiesRegistry.set(this.selectedActivity.id, this.selectedActivity);\r\n                }\r\n            });\r\n        } \r\n        catch (error)\r\n        {\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            });            \r\n            toast.error(\"Error canceling attendancy\");\r\n        }\r\n    }\r\n\r\n    @action setPage = (index: number)=>{\r\n        this.page = index;\r\n    }\r\n\r\n    @computed get activitiesByDate()\r\n    {\r\n        return this.groupActivitiesByDate(Array.from(this.activitiesRegistry.values()));\r\n    }\r\n   \r\n    // @computed get numberOfPages()\r\n    // {\r\n    //     console.log('ac: ',this.activityCount);\r\n    //     return Math.ceil(this.activityCount/LIMIT);\r\n    // }\r\n\r\n    groupActivitiesByDate(activities: IActivity[])\r\n    {\r\n        const sortedActivities = activities\r\n        .sort((a,b) => (Date.parse(a.date)-Date.parse(b.date)));\r\n\r\n        return Object.entries(sortedActivities.reduce((activities, activity:IActivity)=> {\r\n            const date = activity.date.split('T')[0];\r\n            activities[date] = activities[date]? [...activities[date], activity] : [activity]\r\n            return activities\r\n        }, {} as {[key:string]: IActivity[]}));\r\n    }\r\n}\r\n","import {observable, action, computed, runInAction} from 'mobx';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { RootStore } from './rootStore';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore\r\n{\r\n    @observable user: IUser|null = null;\r\n\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore){\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @computed get LoggedIn()\r\n    {\r\n        return !!this.user\r\n    }\r\n\r\n    @action GetUser = async ()=>{\r\n        try {\r\n            const user = await agent.Users.current();\r\n            runInAction(()=> this.user = user);\r\n        } \r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action Login = async (userForm: IUserFormValues)=> {\r\n        try{\r\n            const loggedUser = await agent.Users.login(userForm);\r\n            runInAction(()=>{\r\n                this.user = loggedUser;\r\n                this.rootStore.commonStore.setToken(loggedUser.token);\r\n            });         \r\n            this.rootStore.modalStore.closeModal();\r\n            history.push('/activities');               \r\n        }\r\n        catch(error){\r\n            console.log(error);    \r\n            throw error;        \r\n        }        \r\n    }\r\n\r\n    @action Register = async (userForm: IUserFormValues) => {\r\n        try {\r\n            const createdUser = await agent.Users.register(userForm);\r\n            this.rootStore.commonStore.setToken(createdUser.token);\r\n            this.rootStore.modalStore.closeModal();         \r\n            history.push('/activities');   \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    @action Logout = () => {\r\n        this.user = null;\r\n        this.rootStore.commonStore.setToken(null);\r\n        history.push('/');\r\n    }\r\n}","import {RootStore} from './rootStore';\r\nimport { observable, action, reaction } from 'mobx';\r\n\r\nexport default class CommonStore{\r\n    rootStore: RootStore;    \r\n    constructor(rootStore: RootStore)\r\n    {\r\n        this.rootStore=rootStore;\r\n\r\n        reaction(()=> this.token, \r\n            token=> {\r\n                token? window.localStorage.setItem('jwt',token!) :\r\n                window.localStorage.removeItem('jwt');\r\n            })\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoadded = false;\r\n\r\n    @action setToken = (token: string|null) => {\r\n        window.localStorage.setItem('jwt',token!);\r\n        this.token = token;\r\n    }\r\n\r\n    @action setLoaded = () => {\r\n        this.appLoadded = true;\r\n    }\r\n}","import {RootStore} from './rootStore';\r\nimport { observable, action } from 'mobx';\r\n\r\nexport class ModalStore{\r\n    rootStore: RootStore;\r\n    constructor(root: RootStore){\r\n        this.rootStore = root;\r\n    }\r\n\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    @action closeModal = ()=>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n","import {RootStore} from './rootStore';\r\nimport { IProfile, IPhoto } from '../models/profiles';\r\nimport { observable, action, runInAction, computed } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\nimport { IUserActivity } from '../models/user';\r\n\r\nexport class ProfileStore{\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore)\r\n    {\r\n        this.rootStore = rootStore;\r\n\r\n        // reaction(()=> this.activeTab, \r\n        //     actTab=> {\r\n        //         if(actTab === 3)\r\n        //             this.loadFollows('followers');\r\n        //         else\r\n        //         {\r\n        //             if(actTab === 4)\r\n        //                 this.loadFollows('following');\r\n        //             else \r\n        //                 this.followings = [];\r\n        //         }\r\n        //     })\r\n    }\r\n\r\n    @observable profile: IProfile|null = null;\r\n    @observable loading = false;\r\n    @observable uploading = false;\r\n    @observable loadingSetting = false;\r\n    @observable followings: IProfile[] = [];\r\n    @observable userActivities: IUserActivity[] = [];\r\n    @observable loadingActivities = false;\r\n\r\n    @computed get IsCurrentUser(){\r\n        if(this.rootStore.userStore.user && this.profile){\r\n            return this.rootStore.userStore.user.userName === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // @action SetActiveTab(index: number)\r\n    // {     \r\n    //     this.activeTab = index;\r\n    // }\r\n\r\n    @action loadUserActivities = async (username: string, predicate?: string) =>\r\n    {\r\n        this.loadingActivities = true;\r\n        // try\r\n        // {\r\n        //     const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            \r\n        //     runInAction(()=>{\r\n        //         this.userActivities = activities;\r\n        //         this.loadingActivities = false;\r\n        //     })   \r\n        //     console.log('store ua: ', this.userActivities,activities);\r\n        // }\r\n        // catch (error)\r\n        // {\r\n        //     this.loadingActivities = false;\r\n        //     toast.error(error);\r\n        // }\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            console.log(activities);\r\n            runInAction(() => {\r\n              this.userActivities = activities;\r\n              this.loadingActivities = false;\r\n            });\r\n          } catch (error) {\r\n            toast.error('Problem loading activities')\r\n            runInAction(() => {\r\n              this.loadingActivities = false;\r\n            })\r\n          }\r\n    }\r\n\r\n    @action LoadProfile = async (username: string) =>{\r\n        this.loading = true;\r\n        try \r\n        {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(()=>{\r\n                this.profile = profile;\r\n                this.loading = false;\r\n            });\r\n        } \r\n        catch (error) \r\n        {\r\n            runInAction(()=>{this.loading = false;});            \r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    @action UploadPhoto = async (file: Blob) =>{\r\n        this.uploading = true;\r\n        try \r\n        {\r\n            const photo = await agent.Profiles.uploadPhoto(file);\r\n            runInAction(()=> {\r\n                if(this.profile)\r\n                {\r\n                    this.profile.photos.push(photo);\r\n                    if(photo.isMain && this.rootStore.userStore.user){\r\n                        this.rootStore.userStore.user.image = photo.id\r\n                        this.profile.image = photo.id\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })    \r\n        }\r\n        catch (error)\r\n        {\r\n            runInAction(()=>{this.uploading = false;})            \r\n            toast.error('Problem uploading photo');\r\n        }\r\n    }\r\n\r\n    @action setMain = async (photo: IPhoto) => {\r\n        this.loadingSetting = true;\r\n        try \r\n        {\r\n            await agent.Profiles.setMain(photo.id);\r\n            runInAction(()=>{\r\n                this.rootStore.userStore.user!.image = photo.id;\r\n                this.profile!.photos.find(ph=>ph.isMain)!.isMain = false;\r\n                this.profile!.photos.find(ph=>ph.id ===photo.id)!.isMain = true;\r\n                this.profile!.image = photo.id;\r\n                this.loadingSetting = false;\r\n            });\r\n        } \r\n        catch (error)\r\n        {\r\n            runInAction(()=>{this.loadingSetting=false;})\r\n            toast.error('Error setting as default')\r\n        }\r\n    }\r\n\r\n    @action deleteUser = async (photo: IPhoto) => {\r\n        this.loadingSetting = true;\r\n        try \r\n        {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                this.profile!.photos = this.profile?.photos.filter(ph => ph.id !== photo.id)!;\r\n                this.loadingSetting = false;\r\n            });\r\n        } \r\n        catch (error)\r\n        {\r\n            runInAction(()=>{this.loadingSetting=false;})\r\n            toast.error('Error setting as default')\r\n        }\r\n    }\r\n\r\n    @action follow = async (username: string) => {\r\n        this.loading = true;\r\n        try\r\n        {\r\n            await agent.Profiles.follow(username);\r\n            runInAction(()=> {\r\n                this.profile!.following = true;\r\n                this.profile!.followersCount++;\r\n                this.loading = false;\r\n            });            \r\n        }\r\n        catch (error)\r\n        {\r\n            this.loading = false;\r\n            toast.error(error);\r\n        }\r\n    }\r\n\r\n    @action unfollow = async (username: string) => {\r\n        this.loading = true;\r\n        try\r\n        {\r\n            await agent.Profiles.unFollow(username);\r\n            runInAction(()=> {\r\n                this.profile!.following = false;\r\n                this.profile!.followersCount--;\r\n                this.loading = false;\r\n            });            \r\n        }\r\n        catch (error)\r\n        {\r\n            this.loading = false;\r\n            toast.error(error);\r\n        }\r\n    }\r\n\r\n    @action loadFollows = async (predicate: string) => {\r\n        this.loadingSetting = true;\r\n        try \r\n        {\r\n            console.log(this.profile!.userName);\r\n            const result = (predicate === 'following') ? await agent.Profiles.listFollowings(this.profile!.userName) :\r\n            await agent.Profiles.listFollowers(this.profile!.userName);\r\n            \r\n            runInAction(()=>{\r\n                this.followings = result;\r\n                this.loadingSetting = false;\r\n            });\r\n        }\r\n        catch (error)\r\n        {\r\n            toast.error(error);\r\n            runInAction(()=>{\r\n               this.loading = false;\r\n            });\r\n        }\r\n    }\r\n}","import ActivityStore from '../stores/activityStore';\r\nimport UserStore from '../stores/userStore';\r\nimport CommonStore from './commonStore';\r\nimport { createContext } from 'react';\r\nimport { configure } from 'mobx';\r\nimport { ModalStore } from './modalStore';\r\nimport { ProfileStore } from './profileStore';\r\n\r\nconfigure({enforceActions: 'always'});\r\n\r\nexport class RootStore{\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    activityStore: ActivityStore;   \r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n\r\n    constructor(){\r\n        this.userStore = new UserStore(this);\r\n        this.activityStore = new ActivityStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this);\r\n    }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\nimport { Menu, Container, Button, Image, Dropdown } from 'semantic-ui-react';\nimport { NavLink, Link } from 'react-router-dom';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport { observer } from 'mobx-react-lite';\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {user, Logout} = rootStore.userStore;\n  const userImage = (user)?(user.image)?`/assets/Images/${user.image}.jpg`:'/assets/user.png':'/assets/user.png';\n  \n  return (\n    <Menu fixed='top' inverted>\n      <Container>\n        <Menu.Item header as={NavLink} exact to='/'>\n            <img src= { \"/assets/logo.png\"} alt=\"logo\" style={{marginRight: 10}}/>\n            Reactivities\n        </Menu.Item>\n        <Menu.Item name='Activities' exact as={NavLink} to='/activities'/>\n        <Menu.Item>\n            <Button as={NavLink} to='/activitiesCreate' positive content='Create Activity' />\n        </Menu.Item>\n        {user && \n            <Menu.Item position='right'>\n               <Image avatar spaced='right' src={userImage}/>\n               <Dropdown pointing='top left' text={user.displayName}>\n               <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.userName}`}\n                  text='My profile'\n                  icon='user'\n                />\n                <Dropdown.Item onClick={Logout} text='Logout' icon='power' />\n              </Dropdown.Menu>\n            </Dropdown>\n            </Menu.Item>\n        }\n\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import React from 'react'\r\nimport { List, Image, Popup } from 'semantic-ui-react'\r\nimport {IAttendee} from './../../../app/models/activity'\r\n\r\ninterface IProps{\r\n    attendees: IAttendee[];\r\n}\r\n\r\nconst style = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n}\r\n\r\nconst ActivityListItemAttendee: React.FC<IProps> = ({attendees}) => {\r\n    return (        \r\n        <List horizontal>\r\n            {attendees.map(attend=> (\r\n            \r\n            <List.Item key={attend.userName}>\r\n                <Popup\r\n                    header={attend.displayName}\r\n                    trigger={\r\n                        <Image \r\n                            size='mini' \r\n                            circular bordered \r\n                            src={(attend.image)? `/assets/Images/${attend.image}.jpg` :\"/assets/user.png\"}\r\n                            style={attend.following ? style : null}\r\n                        />}\r\n                />                \r\n            </List.Item>\r\n        ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default ActivityListItemAttendee\r\n","import React from 'react'\r\nimport { Item, Button, Segment, Label, Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { IActivity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface IProps{\r\n    activity: IActivity;\r\n}\r\n\r\nconst ActivityListItem: React.FC<IProps> = ({activity}) => {\r\n   const host = activity.attendees.filter(x=>x.isHost)[0];\r\n   const imageAddress = host?.image? `/assets/Images/${host.image}.jpg` : '/assets/user.png';\r\n    return (\r\n      <Segment.Group>\r\n        <Segment>\r\n          <Item.Group>\r\n          <Item>\r\n            <Item.Image size='tiny' circular src={ imageAddress } style={{margin: 6}}/>\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`activities/${activity.id}`}>{activity.title}</Item.Header>\r\n              <Item.Meta>{activity.date}</Item.Meta>\r\n              {host &&\r\n                <Item.Description>\r\n                  Hosted by \r\n                  <Link to={`/profile/${host.userName}`}> {host.displayName}</Link>\r\n                </Item.Description>\r\n              }              \r\n              <Item.Description>\r\n                  {activity.isHost && \r\n                  <Label color='green' basic  content='You are hosting this activity'/>}\r\n                  {!activity.isHost && activity.isGoing && \r\n                  <Label color='orange' basic  content='You are attending this activity'/>}\r\n              </Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n          </Item.Group>          \r\n        </Segment>\r\n        <Segment>\r\n          <Icon name='clock'/> {activity.date}\r\n          <Icon name='marker'/> {activity.venue} {activity.city}\r\n        </Segment>\r\n        <Segment secondary>\r\n            <ActivityListItemAttendee attendees={activity.attendees}/>\r\n        </Segment>\r\n        <Segment clearing>\r\n          <span>{activity.description}</span>\r\n          <Button\r\n                  as={Link}\r\n                  to={`/activities/${activity.id}`}\r\n                  floated='right'\r\n                  content='View'\r\n                  color='blue'\r\n                />\r\n        </Segment>\r\n      </Segment.Group>        \r\n    )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import React, { useContext, Fragment } from 'react';\nimport { Item, Label } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport {format} from 'date-fns'\n\nconst ActivityList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const activityStore = rootStore.activityStore;\n  const {activitiesByDate} = activityStore;\n  \n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Label size='large' color='blue'>\n            {format(group,'eeee do MMMM')}\n          </Label>\n            <Item.Group divided>\n              {activities.map(activity => (\n                <ActivityListItem key={activity.id} activity={activity}/>\n              ))}\n            </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>    \n  );\n};\n\nexport default observer(ActivityList);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { filterPredicate, setPredicat } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={filterPredicate.size === 0}\r\n          onClick={() => setPredicat('all', 'true')}\r\n          color={'blue'}\r\n          name={'all'}\r\n          content={'All Activities'}\r\n        />\r\n        <Menu.Item\r\n          active={filterPredicate.has('isGoing')}\r\n          onClick={() => setPredicat('isGoing', 'true')}\r\n          color={'blue'}\r\n          name={'username'}\r\n          content={\"I'm Going\"}\r\n        />\r\n        <Menu.Item\r\n          active={filterPredicate.has('isHost')}\r\n          onClick={() => setPredicat('isHost', 'true')}\r\n          color={'blue'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'teal'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicat('startDate', date!)}\r\n        value={filterPredicate.get('startDate') || new Date()}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityFilters);\r\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport {observer} from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport ActivityFilters from './ActivityFilters';\n\nconst ActivityDashboard: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {loadActivities, loadingInitial, numberOfPages, page, setPage} = rootStore.activityStore;\n  const [loadingNext, setLoadingNext] = useState(false);\n\n  const handleGetNext=()=>\n  {\n    setLoadingNext(true);\n    setPage(page+1);\n    loadActivities().then(()=> setLoadingNext(false));\n  }\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n\n  if (loadingInitial && page===0) return <LoadingComponent content='Loading activities' />\n\n  console.log('page: ', page, 'numPag: ', numberOfPages)\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityList/>\n        <Button\n          floated='right'\n          content='See more'\n          positive\n          disabled={page+1 >= numberOfPages}\n          onClick={handleGetNext}\n          loading={loadingNext}\n        />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityFilters/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n// interface IProps\r\n//   extends FieldRenderProps<string, HTMLInputElement>{},\r\n    // FormFieldProps {}\r\n\r\n\r\nconst TextInput: React.FunctionComponent<FieldRenderProps<string, HTMLElement>> = ({\r\n  input,\r\n  width,\r\n  type,\r\n  placeholder,\r\n  meta: { touched, error }\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n      <input {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react'\r\nimport { AxiosResponse } from 'axios'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    error: AxiosResponse,\r\n    text?: string\r\n}\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>\r\n                {error.statusText}\r\n            </Message.Header>\r\n            {error.data && Object.keys(error.data.errors).length > 0 && \r\n                <Message.List>\r\n                    {Object.values(error.data.errors).flat().map((err,i)=> (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>}\r\n            {text && <Message.Content content={text}/>}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage\r\n","import React, { useContext } from 'react'\r\nimport {Form as FinalForm, Field} from 'react-final-form'\r\nimport {Form, Button, Header} from 'semantic-ui-react'\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user'\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\nimport {FORM_ERROR} from 'final-form'\r\nimport { combineValidators, isRequired } from 'revalidate'\r\nimport ErrorMessage from '../../app/common/form/errorMessage'\r\n\r\n\r\nconst LoginForm = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {Login} = rootStore.userStore;\r\n\r\n    const validate = combineValidators({\r\n        email: isRequired('email'),\r\n        password: isRequired('password')\r\n    })\r\n    return (\r\n        <FinalForm \r\n            onSubmit={(values: IUserFormValues)=> Login(values).catch(error=>({\r\n                [FORM_ERROR]:error})\r\n                )}\r\n            validate={validate}\r\n            render={({handleSubmit, submitting, dirtySinceLastSubmit,invalid, pristine , submitError})=>(\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <Field name='email' component={TextInput} placeholder='Email'/>\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='password'/>\r\n                    {submitError && <ErrorMessage error={submitError} text='Invalid UserName or Password'/>}\r\n                    <br/>\r\n                    <Button color='teal' fluid disabled={(invalid && !dirtySinceLastSubmit) || pristine} loading={submitting} content='Login'/>\r\n                </Form>\r\n            )}>\r\n            \r\n        </FinalForm>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useContext } from 'react'\r\nimport {Form as FinalForm, Field} from 'react-final-form'\r\nimport {Form, Button,  Header} from 'semantic-ui-react'\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user'\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\nimport {FORM_ERROR} from 'final-form'\r\nimport { combineValidators, isRequired } from 'revalidate'\r\nimport ErrorMessage from '../../app/common/form/errorMessage'\r\n\r\n\r\nconst RegisterForm = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {Register} = rootStore.userStore;\r\n\r\n    const validate = combineValidators({\r\n        email: isRequired('email'),\r\n        password: isRequired('password'),\r\n        userName: isRequired('userName'),\r\n        displayName: isRequired('displayName')\r\n    })\r\n\r\n    return (\r\n        <FinalForm \r\n            onSubmit={(values: IUserFormValues)=> Register(values).catch(error=>({\r\n                [FORM_ERROR]:error})\r\n                )}\r\n            validate={validate}\r\n            render={({handleSubmit, submitting, dirtySinceLastSubmit,invalid, pristine , submitError})=>(\r\n                <Form onSubmit={handleSubmit} error>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                    <Field name='email' component={TextInput} placeholder='Email'/>\r\n                    <Field name='displayName' component={TextInput} placeholder='Display Name'/>\r\n                    <Field name='userName' component={TextInput} placeholder='User Name'/>\r\n                    <Field name='password' component={TextInput} placeholder='Password' type='password'/>\r\n                    {submitError && \r\n                        <ErrorMessage error={submitError}/>}\r\n                    <br/>\r\n                    <Button color='teal' fluid disabled={(invalid && !dirtySinceLastSubmit) || pristine} loading={submitting} content='Register'/>\r\n                </Form>\r\n            )}>\r\n            \r\n        </FinalForm>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n","import React, { useContext, Fragment } from 'react'\r\nimport { Container, Header, Button, Segment, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport {RootStoreContext} from '../../app/stores/rootStore';\r\nimport LoginForm from '../user/LoginForm';\r\nimport RegisterForm from '../user/RegisterForm';\r\n\r\nconst HomePage = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {LoggedIn, user} = rootStore.userStore;\r\n    const {openModal} = rootStore.modalStore;\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                <Image\r\n                    size='massive'\r\n                    src='/assets/logo.png'\r\n                    alt='logo'\r\n                    style={{ marginBottom: 12 }}\r\n                />\r\n                Reactivities\r\n                </Header>\r\n                {LoggedIn && user ? \r\n                    <Fragment>\r\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`}/>\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Activities\r\n                        </Button>\r\n                    </Fragment>\r\n                    :\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content={`Welcome to Reactivies`}/>\r\n                        <Button onClick={()=>{openModal(<LoginForm/>)}} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={()=>{openModal(<RegisterForm/>)}} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </Fragment>\r\n                }                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react';\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n\r\nconst TextAreaInput: React.FunctionComponent<FieldRenderProps<string, HTMLElement>> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  placeholder,\r\n  meta: { touched, error }\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <textarea {...input} rows={rows} placeholder={placeholder} />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextAreaInput;\r\n","import { FieldRenderProps } from 'react-final-form';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\n\r\nconst SelectInput: React.FunctionComponent<FieldRenderProps<string, HTMLElement>> = ({\r\n  input,\r\n  width,\r\n  options,\r\n  placeholder,\r\n  meta: { touched, error }\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <Select value={input.value} options={options} placeholder={placeholder} onChange={(e,data)=>input.onChange(data.value)} />\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","export const category = [\r\n    { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n    { key: 'culture', text: 'Culture', value: 'culture' },\r\n    { key: 'film', text: 'Film', value: 'film' },\r\n    { key: 'food', text: 'Food', value: 'food' },\r\n    { key: 'music', text: 'Music', value: 'music' },\r\n    { key: 'travel', text: 'Travel', value: 'travel' }\r\n  ];","import { FieldRenderProps } from 'react-final-form';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\nconst DateInput: React.FunctionComponent<FieldRenderProps<string, HTMLElement>> = ({\r\n  input,\r\n  width,\r\n  placeholder,\r\n  meta: { touched, error },\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error}  width={width}>\r\n      <input {...input} type='Date' placeholder={placeholder} />\r\n      {/* <DateTimePicker\r\n        placeholder={placeholder}\r\n        value={ new Date(input.value) || null}\r\n        onChange={input.onChange}\r\n        {...rest}\r\n      /> */}\r\n      {touched && error && (\r\n        <Label basic color='red'>\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default DateInput;\r\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport {v4 as uuid} from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport DateInput from '../../../app/common/form/dateInput';\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({message:'The event title is required'}),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({message: 'Description most have at least 5 characters'})\n  )(),\n  category: isRequired('Category'),\n  city:  isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date')\n})\n\ninterface IParams{\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<IParams>> = ({match, history}) => {\n  const rootStore = useContext(RootStoreContext)\n  const activityStore = rootStore.activityStore;\n  const {createActivity, editActivities, submiting, loadActivity} = activityStore;\n\n  const [activity, setActivity] = useState<IActivity>({\n    id: '',\n    title: '',\n    category: '',\n    description: '',\n    date: '',\n    city: '',\n    venue: '',\n    attendees: [],\n    isGoing: false,\n    isHost: false,\n    comments: []\n  });\n\n  useEffect(()=> {\n    if(match.params.id)\n    {\n      loadActivity(match.params.id)\n      .then((act)=>{\n        setActivity(act)\n      })\n    }\n    //return clearActivity;    \n  },[match.params.id, loadActivity])\n\n  const handleFinalFormSubmit = (activity: any) => {\n    console.log(activity);\n    if (activity.id.length === 0) //create\n    {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity)\n    } \n    else //edit\n    {\n      editActivities(activity)\n    }\n  }\n\n  return (\n    <Grid>\n    <Grid.Column width={10}>      \n      <Segment clearing>\n      <FinalForm onSubmit={handleFinalFormSubmit}\n          initialValues={activity}\n          validate={validate}\n          render={({handleSubmit, invalid, pristine})=>(\n            <Form onSubmit={handleSubmit}>\n              <Field                \n                name='title'\n                placeholder='Title'\n                value={activity.title} \n                component={TextInput} \n              />\n              <Field\n                name='description'\n                placeholder='Description'\n                value={activity.description}\n                rows={3}\n                component={TextAreaInput}\n              />\n              <Field\n                component={SelectInput}\n                options={category}\n                name='category'\n                placeholder='Category'\n                value={activity.category}\n              />\n              <Field\n                component={DateInput}\n                name='date'\n                placeholder='Date'\n                value={activity.date}\n              />\n              <Field\n                component={TextInput}\n                name='city'\n                placeholder='City'\n                value={activity.city}\n              />\n              <Field\n                component={TextInput}\n                name='venue'\n                placeholder='Venue'\n                value={activity.venue}\n              />\n              <Button\n                loading={submiting}\n                floated='right'\n                positive\n                disabled={invalid && pristine}\n                type='submit'\n                content='Submit'\n              />\n              <Button\n                onClick={(match.params.id)\n                  ?() => history.push(`/activities/${match.params.id}`) \n                  :() => history.push('/activities')}\n                floated='right'\n                type='button'\n                content='Cancel'\n              />\n          </Form>\n          )}>\n        </FinalForm>        \n      </Segment>\n    </Grid.Column>\n  </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React, { useContext } from 'react';\r\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst ActivityDetailedHeader: React.FC<{activity: IActivity}> = ({activity}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {joinActivity, cancelAttendee, loading} = rootStore.activityStore;\r\n  const host = activity.attendees.filter(x=>x.isHost)[0];\r\n\r\n  if(loading)\r\n    return <LoadingComponent content='Loading...'/>\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached='top' style={{ padding: '0' }}>\r\n        <Image\r\n          src={`/assets/categoryImages/${activity.category}.jpg`}\r\n          fluid\r\n          style={activityImageStyle}\r\n        />\r\n        <Segment style={activityImageTextStyle} basic>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size='huge'\r\n                  content={activity.title}\r\n                  style={{ color: 'white' }}\r\n                />\r\n                <p>{activity.date}</p>\r\n                <p>\r\n                  Hosted by \r\n                  <Link to={`/profile/${host.userName}`}>\r\n                    <strong> {host.displayName}</strong>\r\n                  </Link>                  \r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached='bottom'>\r\n        {activity.isHost ? \r\n          <Button as={Link} to={`/activitiesEdit/${activity.id}`} color='orange' floated='right'>\r\n            Manage Event\r\n          </Button>\r\n          :activity.isGoing?\r\n          <Button onClick={cancelAttendee}>Cancel attendance</Button>\r\n          :\r\n          <Button onClick={joinActivity} color='teal'>Join Activity</Button>\r\n        }        \r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport { formatDistance, compareAsc } from 'date-fns';\r\n\r\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\r\n    return (\r\n      <Segment.Group>\r\n        <Segment attached='top'>\r\n          <Grid>\r\n            <Grid.Column width={1}>\r\n              <Icon size='large' color='teal' name='info' />\r\n            </Grid.Column>\r\n            <Grid.Column width={15}>\r\n              <p>{activity.description}</p>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n        <Segment attached>\r\n          <Grid verticalAlign='middle'>\r\n            <Grid.Column width={1}>\r\n              <Icon name='calendar alternate' size='large' color='teal' />\r\n            </Grid.Column>\r\n            <Grid.Column width={15}>\r\n              <span>{formatDistance(activity.date, new Date()).concat( \r\n                (compareAsc(activity.date, new Date()) < 0 )?' Ago':' Left')\r\n              } </span>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n        <Segment attached>\r\n          <Grid verticalAlign='middle'>\r\n            <Grid.Column width={1}>\r\n              <Icon name='map marker' size='large' color='teal' />\r\n            </Grid.Column>\r\n            <Grid.Column width={11}>\r\n              <span>\r\n                {activity.venue}, {activity.city}\r\n              </span>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Segment>\r\n      </Segment.Group>\r\n    );\r\n  };\r\n\r\nexport default ActivityDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from 'react'\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport {RootStoreContext} from './../../../app/stores/rootStore';\r\nimport {Form as FinalForm, Field} from 'react-final-form'; \r\nimport { Link } from 'react-router-dom';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {formatDistance} from 'date-fns';\r\n\r\n\r\nconst ActivityDetailedChat = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {createHubConnection, addComment, stopHubConnection, selectedActivity} = rootStore.activityStore; \r\n\r\n    useEffect(()=>{\r\n        createHubConnection();\r\n        return () => stopHubConnection();\r\n    }, [createHubConnection, stopHubConnection]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n            textAlign='center'\r\n            attached='top'\r\n            inverted\r\n            color='teal'\r\n            style={{ border: 'none' }}\r\n            >\r\n            <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n            <Comment.Group>\r\n                {selectedActivity && selectedActivity.comments && selectedActivity.comments.map((comment)=> (\r\n                    <Comment key={comment.id}>\r\n                    <Comment.Avatar src= {(comment.image && `/assets/images/${comment.image}.jpg`) || '/assets/user.png'} />\r\n                    <Comment.Content>\r\n                    <Comment.Author as={Link} to={`/profile/${comment.userName}`}>\r\n                        {comment.displayName}\r\n                    </Comment.Author>\r\n                        <Comment.Metadata>\r\n                        <div>{formatDistance(comment.createdAt, new Date())}</div>\r\n                        </Comment.Metadata>\r\n                        <Comment.Text>{comment.body}</Comment.Text>\r\n                        <Comment.Actions>\r\n                        <Comment.Action>Reply</Comment.Action>\r\n                        </Comment.Actions>\r\n                    </Comment.Content>\r\n                    </Comment>               \r\n                ))}               \r\n    \r\n                <FinalForm\r\n                    onSubmit={addComment}\r\n                    render={({handleSubmit, submitting, form})=>(\r\n                        <Form onSubmit={()=> {handleSubmit()!.then(()=>form.reset())}}>\r\n                        <Field\r\n                            name='Body'\r\n                            component={TextAreaInput}\r\n                            rows={2}\r\n                            placeholder='Add your comment'\r\n                        />\r\n                        <Button\r\n                            content='Add Reply'\r\n                            labelPosition='left'\r\n                            icon='edit'\r\n                            primary\r\n                            loading={submitting}\r\n                        />\r\n                        </Form>\r\n                    )}\r\n                />\r\n\r\n            </Comment.Group>\r\n            </Segment>\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat)\r\n","import React, { Fragment } from 'react'\r\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IAttendee } from '../../../app/models/activity';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps{\r\n    attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityDetailedSideBar: React.FC<IProps> = ({attendees}) => {\r\n    return (     \r\n    <Fragment>\r\n        <Segment\r\n            textAlign='center'\r\n            style={{ border: 'none' }}\r\n            attached='top'\r\n            secondary\r\n            inverted\r\n            color='teal'\r\n        >\r\n            {attendees.length} People Going\r\n        </Segment>\r\n        <Segment attached>\r\n            <List relaxed divided>\r\n                {attendees.map(attend=> (\r\n                    <Item key={attend.userName} style={{ position: 'relative' }}>\r\n                        { attend.isHost &&\r\n                        <Label\r\n                        style={{ position: 'absolute' }}\r\n                        color='orange'\r\n                        ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        }\r\n                        <Image size='tiny' src={(attend.image)?`/assets/Images/${attend.image}.jpg`:null || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                        <Item.Header as='h3'>\r\n                        <Link to={`/profile/${attend.userName}`}>{attend.displayName}</Link>\r\n                        </Item.Header>\r\n                        {attend.following && \r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        }\r\n                        </Item.Content>\r\n                    </Item>\r\n                ))}          \r\n            </List>\r\n        </Segment>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedSideBar)\r\n","import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router-dom';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport AcitivityDetailedHeader from './AcitivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\ninterface IDetailsProp{\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<IDetailsProp>> = ({match, history}) => {\n  const rootStore = useContext(RootStoreContext);\n  const activityStore = rootStore.activityStore;\n  const {selectedActivity, loadActivity, loadingInitial} = activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id)\n  },[loadActivity, match.params.id]);\n\n  if(loadingInitial || !selectedActivity) return <LoadingComponent content='Loading activity...'/>\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <AcitivityDetailedHeader activity={selectedActivity}/>\n        <ActivityDetailedInfo activity={selectedActivity}/>\n        <ActivityDetailedChat/>\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailedSideBar attendees={selectedActivity.attendees}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFoundError = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere but couldn't find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFoundError;","import React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\r\n  return (\r\n    <Modal open={open} onClose={closeModal} size='mini'>\r\n      <Modal.Content>{body}</Modal.Content>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default observer(ModalContainer);\r\n","import React from 'react'\r\nimport { Segment, Grid, Item, Header, Statistic, Divider, Reveal, Button } from 'semantic-ui-react'\r\nimport { IProfile } from '../../app/models/profiles'\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps{\r\n  profile:IProfile|null,\r\n  isCurrentUser: boolean,\r\n  follow: (username: string)=> void\r\n  unfollow: (username: string)=>void\r\n}\r\n\r\nconst ProfileHeader:React.FC<IProps> = ({profile, isCurrentUser, follow, unfollow}) => {\r\n  const imageAddress = profile?.image? `/assets/Images/${profile.image}.jpg` : '/assets/user.png';\r\n    return (\r\n        <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image avatar size='small' src={imageAddress} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1'>{profile?.displayName}</Header>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value={profile?.followersCount} />\r\n            <Statistic label='Following' value={profile?.followingCount} />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          {!isCurrentUser && \r\n            <Reveal animated='move'>\r\n              <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile?.following? 'Following' : 'Not following'} />\r\n              </Reveal.Content>\r\n              <Reveal.Content hidden>\r\n                <Button\r\n                  fluid\r\n                  basic\r\n                  color={profile?.following? 'red' : 'green'}\r\n                  content={profile?.following?  'Unfollow' : 'Follow'}\r\n                  onClick={profile?.following? ()=>unfollow(profile!.userName) : ()=>follow(profile!.userName)}\r\n                />\r\n              </Reveal.Content>\r\n            </Reveal>\r\n          }          \r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader)\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\n\r\ninterface IProps {\r\n    setFiles: (files: object[]) => void;\r\n  }\r\n\r\nconst dropzoneStyles = {\r\nborder: 'dashed 3px',\r\nborderColor: '#eee',\r\nborderRadius: '5px',\r\npaddingTop: '30px',\r\ntextAlign: 'center' as 'center',\r\nheight: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\nborderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n      setFiles(\r\n        acceptedFiles.map((file: object) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n          })\r\n        )\r\n      );\r\n    }, [setFiles]);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  \r\n    return (\r\n      <div\r\n        {...getRootProps()}\r\n        style={\r\n          isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n        }\r\n      >\r\n        <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default PhotoWidgetDropzone;\r\n  ","import React, { useRef } from 'react'\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\n\r\ninterface IProps{\r\n    setImage: (file: Blob)=> void;\r\n    imagePreview: string;\r\n}\r\n\r\nconst PhotoCropperWidget: React.FC<IProps> = ({setImage, imagePreview}) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if(cropper.current && typeof cropper.current?.getCroppedCanvas()==='undefined' )\r\n        {return;}\r\n\r\n        if(cropper && cropper.current)\r\n        {\r\n            cropper.current?.getCroppedCanvas().toBlob((blob: any)=> {\r\n                setImage(blob);\r\n            }, 'image/jpg') \r\n        }               \r\n    }\r\n\r\n    return (\r\n       <Cropper\r\n            ref={cropper}\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%'}}\r\n            aspectRatio={1/1}\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n            preview='.img-preview'\r\n       />\r\n    )\r\n}\r\n\r\nexport default PhotoCropperWidget\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport { Grid, Header, Button } from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\nimport PhotoCropperWidget from './PhotoCropperWidget'\r\n\r\ninterface IProps{\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob)=> void;\r\n} \r\n\r\nconst PhotoUploadWidget:React.FC<IProps> = ({loading, uploadPhoto}) => {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob|null>(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach(file=> URL.revokeObjectURL(file.preview));\r\n        }\r\n    },[files])\r\n\r\n    console.log(files.length);\r\n\r\n    return (\r\n    <Fragment>\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 1: Add Photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 2: Resize Image'/>\r\n                {files.length > 0 &&\r\n                    <PhotoCropperWidget setImage={setImage} imagePreview={files[0].preview}/>}                \r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' sub content='Step 3: Preview-Upload'/>\r\n                {files.length > 0 &&\r\n                    <Fragment>\r\n                        <div className='img-preview' style={{minHeight: '200px', overflow: 'hidden'}}/>\r\n                        <Button.Group widths={2}>\r\n                            <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)}/>\r\n                            <Button icon='close' disabled={loading} onClick={() => setFiles([])}/>\r\n                        </Button.Group>\r\n                    </Fragment>   \r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    </Fragment>\r\n    );\r\n}\r\n\r\nexport default observer(PhotoUploadWidget)\r\n","import React, { useContext, useState } from 'react'\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoUploadWidget from '../../app/common/photoUpload/PhotoUploadWidget';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\nconst ProfilePhotos = () => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {profile, IsCurrentUser, UploadPhoto, uploading, setMain, loadingSetting, deleteUser} = rootStore.profileStore;\r\n    const [addPhotoMode,setAddPhotoMode] = useState(false);\r\n\r\n    const handleUpload = (photo: Blob) => {\r\n        UploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    if(loadingSetting)\r\n    return <LoadingComponent content='Appling...'/>\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header floated='left' icon='image' content='Photos'/>        \r\n                    {IsCurrentUser && \r\n                    <Button \r\n                        floated='right' \r\n                        basic \r\n                        content={addPhotoMode ? 'Cancel' : 'Add photo'}\r\n                        onClick={() => {setAddPhotoMode(!addPhotoMode);}}    \r\n                    />}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ?\r\n                        <PhotoUploadWidget uploadPhoto={handleUpload} loading={uploading}/> :\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile && \r\n                            profile.photos.map(ph=> (\r\n                            <Card fluid key={ph.id}>\r\n                                <Image size='medium'   src={`/assets/Images/${ph.id}.jpg`}/>\r\n                                {IsCurrentUser && (\r\n                                    <Button.Group fluid widths={2}>\r\n                                        <Button basic positive content='Main' disabled={ph.isMain} loading={loadingSetting} onClick={()=>setMain(ph)}/>\r\n                                        <Button basic negative icon='trash' disabled={ph.isMain || profile.photos.length<2} loading={loadingSetting} onClick={()=>deleteUser(ph)}/>\r\n                                    </Button.Group>                                    \r\n                                )}\r\n                            </Card>                                                        \r\n                            ))}\r\n                        </Card.Group>                         \r\n                    }                   \r\n                </Grid.Column>\r\n            </Grid>       \r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos)\r\n","import React from 'react';\r\nimport { Card, Image, Icon} from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../app/models/profiles';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    profile: IProfile\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\r\n  return (\r\n    <Card as={Link} to={`/profile/${profile.userName}`}>\r\n      <Image src={ (profile.image && `/assets/Images/${profile.image}.jpg`) || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div>\r\n          <Icon name='user' />\r\n          {profile.followersCount} Followers\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileCard);\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport ProfileCard from './ProfileCards';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProp{\r\n  consult: string;\r\n}\r\n\r\nconst ProfileFollowings: React.FC<IProp> = ({consult}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    followings,\r\n    loadingSetting,\r\n    loadFollows\r\n  } = rootStore.profileStore;\r\n\r\n  useEffect(()=> {loadFollows(consult)},[loadFollows, consult]);\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingSetting}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={\r\n              consult === 'followers'\r\n                ? `People following ${profile!.displayName}`\r\n                : `People ${profile!.displayName} is following`\r\n            }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={5}>\r\n            {followings.map(fw => (\r\n              <ProfileCard key={fw.userName} profile={fw} />\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileFollowings);\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUserActivity } from '../../app/models/user';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserActivities,\r\n    profile,\r\n    loadingActivities,\r\n    userActivities\r\n  } = rootStore.profileStore;\r\n\r\n  useEffect(() => {loadUserActivities(profile!.userName);}, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    console.log('ua1: ', userActivities);\r\n    loadUserActivities(profile!.userName, predicate);\r\n    console.log('ua2: ', userActivities);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: IUserActivity) => (\r\n            \r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport ProfilePhotos from './ProfilePhotos'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfileActivities from './ProfileActivities'\r\n\r\n\r\nconst panes = [\r\n    {menuItem: 'About', render: () => <Tab.Pane>About content</Tab.Pane>},\r\n    {menuItem: 'Photos', render: () => <ProfilePhotos/>},\r\n    {menuItem: 'Activities', render: () => <ProfileActivities/>},\r\n    {menuItem: 'Followers', render: () => <ProfileFollowings consult='followers'/>},\r\n    {menuItem: 'Following', render: () => <ProfileFollowings consult='following'/>},\r\n]\r\n\r\nconst ProfileContent = () => {\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent)\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport ProfileHeader from './ProfileHeader'\r\nimport ProfileContent from './ProfileContent'\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\ninterface RouteParams{\r\n    username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams>{}\r\n\r\nconst ProfilePage: React.FC<IProps> = ({match}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {loading, LoadProfile, profile, follow, unfollow, IsCurrentUser} = rootStore.profileStore;\r\n\r\n    useEffect(()=>{\r\n        LoadProfile(match.params.username)\r\n    }, [LoadProfile, match]);\r\n\r\n    if(loading) return <LoadingComponent content='Loading Profile...'/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader profile={profile} isCurrentUser={IsCurrentUser} follow={follow} unfollow={unfollow}/>\r\n                <ProfileContent/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage)\r\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport { Route, RouteComponentProps, withRouter, Switch } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFoundError from './NotFoundError';\nimport {ToastContainer} from 'react-toastify';\nimport {RootStoreContext} from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\n\n\nconst App: React.FC<RouteComponentProps> = ({location}) => {\n\n\tconst rootStore = useContext(RootStoreContext);\n\tconst {token, setLoaded, appLoadded} = rootStore.commonStore;\n\tconst {GetUser} = rootStore.userStore;\n\n\tuseEffect(()=>{\n\t\tif(token){\n\t\t\tGetUser().finally(()=> setLoaded());\n\t\t}\n\t\telse{\n\t\t\tsetLoaded();\n\t\t}\n\t}, [setLoaded, token, GetUser]);\n\n\tif(!appLoadded) return <LoadingComponent content='Loading App...'/>\n\n  return (\n    <Fragment>      \n\t  <ModalContainer/>\n\t  <ToastContainer position='bottom-right'/>\n      <Route exact path='/' component={HomePage}/>\n      <Route path={'/(.+)'} render={()=>\n\t\t  <Fragment>\n\t\t\t<NavBar/>\n\t\t\t<Container style={{ marginTop: '7em' }}>        \n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/activities' component={ActivityDashboard}/>\n\t\t\t\t\t<Route exact path='/activities/:id' component={ActivityDetails}/>\n\t\t\t\t\t<Route key={location.key} path= {['/activitiesCreate','/activitiesEdit/:id']} component={ActivityForm}/>    \n\t\t\t\t\t<Route path='/profile/:username' component={ProfilePage}/>\n\t\t\t\t\t<Route component={NotFoundError} />   \n\t\t\t\t</Switch>\t\t\t\t\n\t\t\t</Container>\n\t\t  </Fragment>\n      }/>      \n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { withRouter } from \"react-router-dom\";\r\nimport {useEffect} from 'react';\r\n\r\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\r\n    useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n  \r\n    return children || null;\r\n  };\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Router} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <Router history={history}>\n        <ScrollToTop>\n            <App />\n        </ScrollToTop>        \n    </Router>\n, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}